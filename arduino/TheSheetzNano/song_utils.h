#define SONG_COUNT 4

float playSpeedFactor = 1.0;

void song1(float speedFactor) {
  tone(SPEAKER_PIN, 329, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 246, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 329, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 440, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 415, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 369, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 329, 231);
  delay(speedFactor*246);
  delay(speedFactor*344);
  tone(SPEAKER_PIN, 493, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 554, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 369, 205);

  //delay(speedFactor*246);
  //delay(speedFactor*49);

  delay(speedFactor*218);
  delay(speedFactor*3);
  tone(SPEAKER_PIN, 369, 66);
  delay(speedFactor*70);
  delay(speedFactor*3);

  //delay(speedFactor*246);
  //delay(speedFactor*49);

  tone(SPEAKER_PIN, 440, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 415, 277);
  delay(speedFactor*295);
  tone(SPEAKER_PIN, 369, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 329, 231);
  delay(speedFactor*246);
  delay(speedFactor*344);
  tone(SPEAKER_PIN, 329, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 246, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 329, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 440, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 415, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 369, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 329, 231);
  delay(speedFactor*246);
  delay(speedFactor*344);
  tone(SPEAKER_PIN, 493, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 554, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 369, 205);
  delay(speedFactor*218);
  delay(speedFactor*3);
  tone(SPEAKER_PIN, 369, 66);
  delay(speedFactor*70);
  delay(speedFactor*3);
  tone(SPEAKER_PIN, 440, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 415, 277);
  delay(speedFactor*295);
  tone(SPEAKER_PIN, 369, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 329, 231);
  delay(speedFactor*246);
  delay(speedFactor*344);
  tone(SPEAKER_PIN, 493, 370);
  delay(speedFactor*393);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 493, 135);
  delay(speedFactor*144);
  delay(speedFactor*3);
  tone(SPEAKER_PIN, 554, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 622, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 659, 485);
  delay(speedFactor*516);
  delay(speedFactor*73);
  tone(SPEAKER_PIN, 493, 231);
  delay(speedFactor*246);
  delay(speedFactor*344);
  tone(SPEAKER_PIN, 659, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 622, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 554, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 493, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 493, 138);
  delay(speedFactor*147);
  tone(SPEAKER_PIN, 440, 138);
  delay(speedFactor*147);
  tone(SPEAKER_PIN, 415, 138);
  delay(speedFactor*147);
  tone(SPEAKER_PIN, 440, 135);
  delay(speedFactor*144);
  delay(speedFactor*3);
  tone(SPEAKER_PIN, 369, 231);
  delay(speedFactor*246);

  delay(speedFactor*344);
  tone(SPEAKER_PIN, 415, 370);
  delay(speedFactor*393);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 440, 135);
  delay(speedFactor*144);
  delay(speedFactor*3);
  tone(SPEAKER_PIN, 493, 485);
  delay(speedFactor*516);
  delay(speedFactor*73);
  tone(SPEAKER_PIN, 369, 370);
  delay(speedFactor*393);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 415, 135);
  delay(speedFactor*144);
  delay(speedFactor*3);
  tone(SPEAKER_PIN, 440, 370);
  delay(speedFactor*393);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 440, 135);
  delay(speedFactor*144);
  delay(speedFactor*3);
  tone(SPEAKER_PIN, 415, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 311, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 329, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 440, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 415, 277);
  delay(speedFactor*295);
  //tone(SPEAKER_PIN, 369, 231);
  tone(SPEAKER_PIN, 440, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  //tone(SPEAKER_PIN, 329, 485);
  tone(SPEAKER_PIN, 493 , 485);
  delay(speedFactor*516);
  delay(speedFactor*49);

  tone(SPEAKER_PIN, 415, 370);
  delay(speedFactor*393);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 440, 135);
  delay(speedFactor*144);
  delay(speedFactor*3);
  tone(SPEAKER_PIN, 493, 485);
  delay(speedFactor*516);
  delay(speedFactor*73);
  tone(SPEAKER_PIN, 369, 370);
  delay(speedFactor*393);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 415, 135);
  delay(speedFactor*144);
  delay(speedFactor*3);
  tone(SPEAKER_PIN, 440, 370);
  delay(speedFactor*393);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 440, 135);
  delay(speedFactor*144);
  delay(speedFactor*3);
  tone(SPEAKER_PIN, 415, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 311, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 329, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 440, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 415, 277);
  delay(speedFactor*295);
  tone(SPEAKER_PIN, 369, 231);
  delay(speedFactor*246);
  delay(speedFactor*49);
  tone(SPEAKER_PIN, 329, 485);
  delay(speedFactor*516);
}



void song4(float speedFactor) {
  tone(SPEAKER_PIN, 329, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 659, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 659, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 493, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 440, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 391, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 440, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 391, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 493, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 659, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 493, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 440, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 391, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 440, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 391, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 391, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 440, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 440, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 391, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 391, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 391, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 440, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 391, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 369, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 391, 681);
  delay(speedFactor*757);
  tone(SPEAKER_PIN, 391, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 440, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 440, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 391, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 391, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 391, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 440, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 391, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 369, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 329, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 329, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 493, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 493, 681);
  delay(speedFactor*757);
  tone(SPEAKER_PIN, 329, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 493, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 493, 681);
  delay(speedFactor*757);
  tone(SPEAKER_PIN, 329, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 493, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 523, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 440, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 493, 681);
  delay(speedFactor*757);
  delay(speedFactor*757);
  tone(SPEAKER_PIN, 493, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 523, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 440, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 493, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 523, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 440, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 391, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 391, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 391, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 440, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 391, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 440, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 493, 1022);
  delay(speedFactor*1136);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 493, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 523, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 440, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 493, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 523, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 493, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 440, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 391, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 391, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 391, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 440, 340);
  delay(speedFactor*378);
  tone(SPEAKER_PIN, 391, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 369, 170);
  delay(speedFactor*189);
  tone(SPEAKER_PIN, 329, 1022);
  delay(speedFactor*1136);
}



void song5(float speedFactor) {
  tone(SPEAKER_PIN, 391, 90);
  delay(speedFactor*100);
  delay(speedFactor*130);
  tone(SPEAKER_PIN, 329, 81);
  delay(speedFactor*90);
  delay(speedFactor*140);
  tone(SPEAKER_PIN, 391, 317);
  delay(speedFactor*352);
  delay(speedFactor*150);
  tone(SPEAKER_PIN, 391, 90);
  delay(speedFactor*100);
  delay(speedFactor*110);
  tone(SPEAKER_PIN, 329, 81);
  delay(speedFactor*90);
  delay(speedFactor*140);
  tone(SPEAKER_PIN, 391, 344);
  delay(speedFactor*382);
  delay(speedFactor*161);
  tone(SPEAKER_PIN, 329, 86);
  delay(speedFactor*95);
  delay(speedFactor*125);
  tone(SPEAKER_PIN, 391, 90);
  delay(speedFactor*100);
  delay(speedFactor*115);
  tone(SPEAKER_PIN, 523, 95);
  delay(speedFactor*105);
  delay(speedFactor*125);
  tone(SPEAKER_PIN, 493, 86);
  delay(speedFactor*95);
  delay(speedFactor*145);
  tone(SPEAKER_PIN, 440, 661);
  delay(speedFactor*734);
  delay(speedFactor*296);
  tone(SPEAKER_PIN, 349, 81);
  delay(speedFactor*90);
  delay(speedFactor*130);
  tone(SPEAKER_PIN, 293, 81);
  delay(speedFactor*90);
  delay(speedFactor*125);
  tone(SPEAKER_PIN, 349, 317);
  delay(speedFactor*352);
  delay(speedFactor*145);
  tone(SPEAKER_PIN, 349, 90);
  delay(speedFactor*100);
  delay(speedFactor*120);
  tone(SPEAKER_PIN, 293, 86);
  delay(speedFactor*95);
  delay(speedFactor*125);
  tone(SPEAKER_PIN, 349, 307);
  delay(speedFactor*342);
  delay(speedFactor*171);
  tone(SPEAKER_PIN, 293, 81);
  delay(speedFactor*90);
  delay(speedFactor*130);
  tone(SPEAKER_PIN, 349, 81);
  delay(speedFactor*90);
  delay(speedFactor*140);
  tone(SPEAKER_PIN, 493, 86);
  delay(speedFactor*95);
  delay(speedFactor*135);
  tone(SPEAKER_PIN, 440, 81);
  delay(speedFactor*90);
  delay(speedFactor*161);
  tone(SPEAKER_PIN, 391, 674);
  delay(speedFactor*749);
  delay(speedFactor*241);
  tone(SPEAKER_PIN, 391, 86);
  delay(speedFactor*95);
  delay(speedFactor*125);
  tone(SPEAKER_PIN, 329, 76);
  delay(speedFactor*85);
  delay(speedFactor*155);
  tone(SPEAKER_PIN, 391, 335);
  delay(speedFactor*372);
  delay(speedFactor*161);
  tone(SPEAKER_PIN, 391, 90);
  delay(speedFactor*100);
  delay(speedFactor*120);
  tone(SPEAKER_PIN, 329, 81);
  delay(speedFactor*90);
  delay(speedFactor*120);
  tone(SPEAKER_PIN, 391, 326);
  delay(speedFactor*362);
  delay(speedFactor*166);
  tone(SPEAKER_PIN, 329, 95);
  delay(speedFactor*105);
  delay(speedFactor*105);
  tone(SPEAKER_PIN, 391, 86);
  delay(speedFactor*95);
  delay(speedFactor*130);
  tone(SPEAKER_PIN, 523, 86);
  delay(speedFactor*95);
  delay(speedFactor*125);
  tone(SPEAKER_PIN, 493, 86);
  delay(speedFactor*95);
  delay(speedFactor*161);
  tone(SPEAKER_PIN, 440, 806);
  delay(speedFactor*895);
  delay(speedFactor*110);
  tone(SPEAKER_PIN, 493, 81);
  delay(speedFactor*90);
  delay(speedFactor*130);
  tone(SPEAKER_PIN, 493, 67);
  delay(speedFactor*75);
  delay(speedFactor*145);
  tone(SPEAKER_PIN, 493, 326);
  delay(speedFactor*362);
  delay(speedFactor*161);
  tone(SPEAKER_PIN, 493, 63);
  delay(speedFactor*70);
  delay(speedFactor*140);
  tone(SPEAKER_PIN, 493, 63);
  delay(speedFactor*70);
  delay(speedFactor*161);
  tone(SPEAKER_PIN, 493, 307);
  delay(speedFactor*342);
  delay(speedFactor*140);
  tone(SPEAKER_PIN, 493, 90);
  delay(speedFactor*100);
  delay(speedFactor*120);
  tone(SPEAKER_PIN, 391, 86);
  delay(speedFactor*95);
  delay(speedFactor*135);
  tone(SPEAKER_PIN, 440, 81);
  delay(speedFactor*90);
  delay(speedFactor*140);
  tone(SPEAKER_PIN, 493, 67);
  delay(speedFactor*75);
  delay(speedFactor*231);
  tone(SPEAKER_PIN, 523, 525);
  delay(speedFactor*583);
  delay(speedFactor*372);
  tone(SPEAKER_PIN, 783, 76);
  delay(speedFactor*85);
  delay(speedFactor*145);
  tone(SPEAKER_PIN, 659, 72);
  delay(speedFactor*80);
  delay(speedFactor*161);
  tone(SPEAKER_PIN, 783, 335);
  delay(speedFactor*372);
  delay(speedFactor*135);
  tone(SPEAKER_PIN, 783, 81);
  delay(speedFactor*90);
  delay(speedFactor*135);
  tone(SPEAKER_PIN, 659, 81);
  delay(speedFactor*90);
  delay(speedFactor*140);
  tone(SPEAKER_PIN, 783, 317);
  delay(speedFactor*352);
  delay(speedFactor*145);
  tone(SPEAKER_PIN, 659, 244);
  delay(speedFactor*271);
  delay(speedFactor*70);
  tone(SPEAKER_PIN, 783, 86);
  delay(speedFactor*95);
  tone(SPEAKER_PIN, 1046, 90);
  delay(speedFactor*100);
  delay(speedFactor*166);
  tone(SPEAKER_PIN, 987, 67);
  delay(speedFactor*75);
  delay(speedFactor*186);
  tone(SPEAKER_PIN, 880, 670);
  delay(speedFactor*744);
  delay(speedFactor*221);
  tone(SPEAKER_PIN, 698, 63);
  delay(speedFactor*70);
  delay(speedFactor*161);
  tone(SPEAKER_PIN, 587, 81);
  delay(speedFactor*90);
  delay(speedFactor*161);
  tone(SPEAKER_PIN, 698, 339);
  delay(speedFactor*377);
  delay(speedFactor*145);
  tone(SPEAKER_PIN, 698, 86);
  delay(speedFactor*95);
  delay(speedFactor*125);
  tone(SPEAKER_PIN, 587, 104);
  delay(speedFactor*115);
  delay(speedFactor*125);
  tone(SPEAKER_PIN, 698, 303);
  delay(speedFactor*337);
  delay(speedFactor*130);
  tone(SPEAKER_PIN, 587, 230);
  delay(speedFactor*256);
  delay(speedFactor*85);
  tone(SPEAKER_PIN, 698, 67);
  delay(speedFactor*75);
  delay(speedFactor*10);
  tone(SPEAKER_PIN, 987, 90);
  delay(speedFactor*100);
  delay(speedFactor*155);
  tone(SPEAKER_PIN, 880, 67);
  delay(speedFactor*75);
  delay(speedFactor*176);
  tone(SPEAKER_PIN, 783, 652);
  delay(speedFactor*724);
  delay(speedFactor*241);
  tone(SPEAKER_PIN, 783, 63);
  delay(speedFactor*70);
  delay(speedFactor*155);
  tone(SPEAKER_PIN, 659, 76);
  delay(speedFactor*85);
  delay(speedFactor*176);
  tone(SPEAKER_PIN, 783, 344);
  delay(speedFactor*382);
  delay(speedFactor*145);
  tone(SPEAKER_PIN, 783, 95);
  delay(speedFactor*105);
  delay(speedFactor*130);
  tone(SPEAKER_PIN, 659, 90);
  delay(speedFactor*100);
  delay(speedFactor*120);
  tone(SPEAKER_PIN, 783, 289);
  delay(speedFactor*322);
  delay(speedFactor*166);
  tone(SPEAKER_PIN, 659, 95);
  delay(speedFactor*105);
  delay(speedFactor*120);
  tone(SPEAKER_PIN, 783, 81);
  delay(speedFactor*90);
  delay(speedFactor*130);
  tone(SPEAKER_PIN, 1046, 76);
  delay(speedFactor*85);
  delay(speedFactor*161);
  tone(SPEAKER_PIN, 987, 72);
  delay(speedFactor*80);
  delay(speedFactor*191);
  tone(SPEAKER_PIN, 880, 615);
  delay(speedFactor*684);
  delay(speedFactor*191);
  delay(speedFactor*45);
  tone(SPEAKER_PIN, 932, 18);
  delay(speedFactor*20);
  tone(SPEAKER_PIN, 987, 54);
  delay(speedFactor*60);
  delay(speedFactor*161);
  tone(SPEAKER_PIN, 987, 72);
  delay(speedFactor*80);
  delay(speedFactor*166);
  tone(SPEAKER_PIN, 987, 285);
  delay(speedFactor*317);
  delay(speedFactor*130);
  delay(speedFactor*45);
  tone(SPEAKER_PIN, 932, 18);
  delay(speedFactor*20);
  tone(SPEAKER_PIN, 987, 49);
  delay(speedFactor*55);
  delay(speedFactor*186);
  tone(SPEAKER_PIN, 987, 49);
  delay(speedFactor*5);
  tone(SPEAKER_PIN, 880, 54);
  delay(speedFactor*60);
  tone(SPEAKER_PIN, 987, 4);
  delay(speedFactor*5);
  delay(speedFactor*155);
  tone(SPEAKER_PIN, 987, 294);
  delay(speedFactor*327);
  delay(speedFactor*150);
  tone(SPEAKER_PIN, 987, 240);
  delay(speedFactor*266);
  delay(speedFactor*85);
  tone(SPEAKER_PIN, 783, 58);
  delay(speedFactor*65);
  delay(speedFactor*45);
  tone(SPEAKER_PIN, 880, 76);
  delay(speedFactor*85);
  delay(speedFactor*161);
  tone(SPEAKER_PIN, 987, 72);
  delay(speedFactor*80);
  delay(speedFactor*191);
  tone(SPEAKER_PIN, 1046, 371);
  delay(speedFactor*412);
  delay(speedFactor*70);
}

void song6(float speedFactor) {
  tone(SPEAKER_PIN, 349, 84);
  delay(speedFactor*93);
  delay(speedFactor*128);
  tone(SPEAKER_PIN, 349, 51);
  delay(speedFactor*57);
  delay(speedFactor*26);
  tone(SPEAKER_PIN, 261, 55);
  delay(speedFactor*61);
  delay(speedFactor*25);
  tone(SPEAKER_PIN, 349, 79);
  delay(speedFactor*87);
  delay(speedFactor*119);
  tone(SPEAKER_PIN, 391, 79);
  delay(speedFactor*87);
  delay(speedFactor*119);
  tone(SPEAKER_PIN, 440, 105);
  delay(speedFactor*116);
  delay(speedFactor*93);
  tone(SPEAKER_PIN, 440, 65);
  delay(speedFactor*72);
  delay(speedFactor*21);
  tone(SPEAKER_PIN, 349, 56);
  delay(speedFactor*62);
  delay(speedFactor*35);
  tone(SPEAKER_PIN, 391, 85);
  delay(speedFactor*94);
  delay(speedFactor*133);
  tone(SPEAKER_PIN, 466, 71);
  delay(speedFactor*79);
  delay(speedFactor*134);
  tone(SPEAKER_PIN, 440, 347);
  delay(speedFactor*385);
  delay(speedFactor*41);
  tone(SPEAKER_PIN, 523, 313);
  delay(speedFactor*348);
  delay(speedFactor*51);
  tone(SPEAKER_PIN, 440, 311);
  delay(speedFactor*346);
  delay(speedFactor*45);
  tone(SPEAKER_PIN, 523, 297);
  delay(speedFactor*330);
  delay(speedFactor*81);
  tone(SPEAKER_PIN, 349, 99);
  delay(speedFactor*110);
  delay(speedFactor*95);
  tone(SPEAKER_PIN, 349, 56);
  delay(speedFactor*62);
  delay(speedFactor*28);
  tone(SPEAKER_PIN, 261, 56);
  delay(speedFactor*63);
  delay(speedFactor*35);
  tone(SPEAKER_PIN, 349, 74);
  delay(speedFactor*82);
  delay(speedFactor*139);
  tone(SPEAKER_PIN, 391, 87);
  delay(speedFactor*97);
  delay(speedFactor*93);
  tone(SPEAKER_PIN, 440, 102);
  delay(speedFactor*114);
  delay(speedFactor*92);
  tone(SPEAKER_PIN, 440, 63);
  delay(speedFactor*70);
  delay(speedFactor*24);
  tone(SPEAKER_PIN, 349, 58);
  delay(speedFactor*64);
  delay(speedFactor*32);
  tone(SPEAKER_PIN, 391, 75);
  delay(speedFactor*83);
  delay(speedFactor*141);
  tone(SPEAKER_PIN, 440, 92);
  delay(speedFactor*103);
  delay(speedFactor*105);
  tone(SPEAKER_PIN, 349, 348);
  delay(speedFactor*387);
  delay(speedFactor*23);
  tone(SPEAKER_PIN, 293, 325);
  delay(speedFactor*361);
  delay(speedFactor*32);
  tone(SPEAKER_PIN, 349, 652);
  delay(speedFactor*724);
  delay(speedFactor*108);
  tone(SPEAKER_PIN, 349, 103);
  delay(speedFactor*115);
  delay(speedFactor*89);
  tone(SPEAKER_PIN, 349, 58);
  delay(speedFactor*64);
  delay(speedFactor*29);
  tone(SPEAKER_PIN, 261, 52);
  delay(speedFactor*58);
  delay(speedFactor*36);
  tone(SPEAKER_PIN, 349, 59);
  delay(speedFactor*66);
  delay(speedFactor*147);
  tone(SPEAKER_PIN, 391, 78);
  delay(speedFactor*87);
  delay(speedFactor*110);
  tone(SPEAKER_PIN, 440, 108);
  delay(speedFactor*120);
  delay(speedFactor*93);
  tone(SPEAKER_PIN, 440, 54);
  delay(speedFactor*60);
  delay(speedFactor*30);
  tone(SPEAKER_PIN, 349, 69);
  delay(speedFactor*77);
  delay(speedFactor*29);
  tone(SPEAKER_PIN, 391, 57);
  delay(speedFactor*64);
  delay(speedFactor*140);
  tone(SPEAKER_PIN, 466, 75);
  delay(speedFactor*83);
  delay(speedFactor*128);
  tone(SPEAKER_PIN, 440, 285);
  delay(speedFactor*317);
  delay(speedFactor*81);
  tone(SPEAKER_PIN, 523, 311);
  delay(speedFactor*346);
  delay(speedFactor*70);
  tone(SPEAKER_PIN, 440, 318);
  delay(speedFactor*354);
  delay(speedFactor*61);
  tone(SPEAKER_PIN, 523, 318);
  delay(speedFactor*353);
  delay(speedFactor*68);
  tone(SPEAKER_PIN, 349, 106);
  delay(speedFactor*118);
  delay(speedFactor*83);
  tone(SPEAKER_PIN, 349, 69);
  delay(speedFactor*77);
  delay(speedFactor*23);
  tone(SPEAKER_PIN, 261, 56);
  delay(speedFactor*63);
  delay(speedFactor*32);
  tone(SPEAKER_PIN, 349, 99);
  delay(speedFactor*110);
  delay(speedFactor*93);
  tone(SPEAKER_PIN, 391, 97);
  delay(speedFactor*108);
  delay(speedFactor*92);
  tone(SPEAKER_PIN, 440, 105);
  delay(speedFactor*116);
  delay(speedFactor*95);
  tone(SPEAKER_PIN, 440, 62);
  delay(speedFactor*69);
  delay(speedFactor*31);
  tone(SPEAKER_PIN, 349, 38);
  delay(speedFactor*42);
  delay(speedFactor*54);
  tone(SPEAKER_PIN, 391, 89);
  delay(speedFactor*99);
  delay(speedFactor*105);
  tone(SPEAKER_PIN, 440, 64);
  delay(speedFactor*71);
  delay(speedFactor*136);
  tone(SPEAKER_PIN, 349, 345);
  delay(speedFactor*384);
  delay(speedFactor*17);
  tone(SPEAKER_PIN, 293, 321);
  delay(speedFactor*357);
  delay(speedFactor*59);
  tone(SPEAKER_PIN, 349, 647);
  delay(speedFactor*718);
  delay(speedFactor*113);
  tone(SPEAKER_PIN, 523, 1399);
  delay(speedFactor*1554);
  delay(speedFactor*76);
  tone(SPEAKER_PIN, 523, 150);
  delay(speedFactor*167);
  delay(speedFactor*48);
  tone(SPEAKER_PIN, 622, 112);
  delay(speedFactor*125);
  delay(speedFactor*81);
  tone(SPEAKER_PIN, 587, 133);
  delay(speedFactor*148);
  delay(speedFactor*64);
  tone(SPEAKER_PIN, 523, 114);
  delay(speedFactor*127);
  delay(speedFactor*72);
  tone(SPEAKER_PIN, 493, 129);
  delay(speedFactor*144);
  delay(speedFactor*43);
  tone(SPEAKER_PIN, 391, 128);
  delay(speedFactor*142);
  delay(speedFactor*56);
  tone(SPEAKER_PIN, 493, 148);
  delay(speedFactor*164);
  delay(speedFactor*40);
  tone(SPEAKER_PIN, 587, 114);
  delay(speedFactor*127);
  delay(speedFactor*77);
  tone(SPEAKER_PIN, 523, 1401);
  delay(speedFactor*1557);
  delay(speedFactor*75);
  tone(SPEAKER_PIN, 523, 127);
  delay(speedFactor*141);
  delay(speedFactor*62);
  tone(SPEAKER_PIN, 622, 114);
  delay(speedFactor*127);
  delay(speedFactor*87);
  tone(SPEAKER_PIN, 587, 114);
  delay(speedFactor*127);
  delay(speedFactor*84);
  tone(SPEAKER_PIN, 523, 100);
  delay(speedFactor*111);
  delay(speedFactor*88);
  tone(SPEAKER_PIN, 493, 126);
  delay(speedFactor*140);
  delay(speedFactor*67);
  tone(SPEAKER_PIN, 391, 117);
  delay(speedFactor*130);
  delay(speedFactor*67);
  tone(SPEAKER_PIN, 493, 124);
  delay(speedFactor*138);
  delay(speedFactor*60);
  tone(SPEAKER_PIN, 587, 96);
  delay(speedFactor*106);
  delay(speedFactor*101);
  tone(SPEAKER_PIN, 523, 1426);
  delay(speedFactor*1585);
  delay(speedFactor*46);
  tone(SPEAKER_PIN, 415, 165);
  delay(speedFactor*184);
  delay(speedFactor*38);
  tone(SPEAKER_PIN, 523, 119);
  delay(speedFactor*132);
  delay(speedFactor*70);
  tone(SPEAKER_PIN, 493, 147);
  delay(speedFactor*163);
  delay(speedFactor*40);
  tone(SPEAKER_PIN, 415, 125);
  delay(speedFactor*139);
  delay(speedFactor*70);
  tone(SPEAKER_PIN, 391, 148);
  delay(speedFactor*164);
  delay(speedFactor*27);
  tone(SPEAKER_PIN, 349, 117);
  delay(speedFactor*130);
  delay(speedFactor*75);
  tone(SPEAKER_PIN, 493, 135);
  delay(speedFactor*150);
  delay(speedFactor*54);
  tone(SPEAKER_PIN, 523, 99);
  delay(speedFactor*110);
  delay(speedFactor*92);
  tone(SPEAKER_PIN, 523, 1433);
  delay(speedFactor*1593);
  delay(speedFactor*40);
  tone(SPEAKER_PIN, 415, 161);
  delay(speedFactor*179);
  delay(speedFactor*31);
  tone(SPEAKER_PIN, 523, 152);
  delay(speedFactor*169);
  delay(speedFactor*36);
  tone(SPEAKER_PIN, 493, 159);
  delay(speedFactor*176);
  delay(speedFactor*36);
  tone(SPEAKER_PIN, 415, 153);
  delay(speedFactor*170);
  delay(speedFactor*29);
  tone(SPEAKER_PIN, 391, 129);
  delay(speedFactor*143);
  delay(speedFactor*66);
  tone(SPEAKER_PIN, 349, 158);
  delay(speedFactor*175);
  delay(speedFactor*29);
  tone(SPEAKER_PIN, 391, 150);
  delay(speedFactor*167);
  delay(speedFactor*40);
  tone(SPEAKER_PIN, 415, 154);
  delay(speedFactor*171);
  delay(speedFactor*41);
  tone(SPEAKER_PIN, 349, 1363);
  delay(speedFactor*1514);
  delay(speedFactor*79);
}

void song(int index, float speedFactor) {
  switch(index) {
    case 0:
      song1(speedFactor);
      break;
    case 1:
      song4(speedFactor);
      break;
    case 2:
      song5(speedFactor);
      break;
    case 3:
      song6(speedFactor);
      break;
  }
}
